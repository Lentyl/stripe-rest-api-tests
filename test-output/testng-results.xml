<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="49" passed="46" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-06-28T17:45:29 CEST" name="Suite" finished-at="2022-06-28T17:46:19 CEST" duration-ms="50674">
    <groups>
    </groups>
    <test started-at="2022-06-28T17:45:29 CEST" name="Create customer API test" finished-at="2022-06-28T17:45:43 CEST" duration-ms="14528">
      <class name="com.testcases.CustomerTests">
        <test-method signature="createCustomerWithValidKey(java.util.Hashtable)[pri:1, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:29 CEST" name="createCustomerWithValidKey" data-provider="data" finished-at="2022-06-28T17:45:32 CEST" duration-ms="3452" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=PLN, phone=123456789, email=mariusz88@gmial.com, name=Mariusz Podgorski, customerListIndex=1, description=Adding the new customer Mariusz Pdgorski to data base, balance=6000}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerWithValidKey -->
        <test-method signature="createCustomerWithValidKey(java.util.Hashtable)[pri:1, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:32 CEST" name="createCustomerWithValidKey" data-provider="data" finished-at="2022-06-28T17:45:33 CEST" duration-ms="822" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=USD, phone=987654321, email=robert@wp.pl, name=Robert Materka, customerListIndex=2, description=Adding the new customer Robert Materka to data base, balance=87650}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerWithValidKey -->
        <test-method signature="createCustomerWithValidKey(java.util.Hashtable)[pri:1, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:33 CEST" name="createCustomerWithValidKey" data-provider="data" finished-at="2022-06-28T17:45:34 CEST" duration-ms="913" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=EU, phone=657843891, email=michael88@wp.pl, name=Michael Jordan, customerListIndex=3, description=Adding the new customer Michael Jordan to data base, balance=65430}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerWithValidKey -->
        <test-method signature="createCustomerWithInvalidKey(java.util.Hashtable)[pri:2, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:34 CEST" name="createCustomerWithInvalidKey" data-provider="data" finished-at="2022-06-28T17:45:34 CEST" duration-ms="375" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=PLN, phone=654789543, email=marek88@gmial.com, name=Marek Jaworski, description=Adding the new customer Mariusz Pdgorski to data base, balance=7000}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerWithInvalidKey -->
        <test-method signature="listAllCustomers(java.util.Hashtable)[pri:3, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:34 CEST" name="listAllCustomers" data-provider="data" finished-at="2022-06-28T17:45:35 CEST" duration-ms="878" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listAllCustomers -->
        <test-method signature="searchExistingTwoCustomers(java.util.Hashtable)[pri:4, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:35 CEST" name="searchExistingTwoCustomers" data-provider="data" finished-at="2022-06-28T17:45:36 CEST" duration-ms="739" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchExistingTwoCustomers -->
        <test-method signature="searchCustomersWithValidQueryParameter(java.util.Hashtable)[pri:5, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:36 CEST" name="searchCustomersWithValidQueryParameter" data-provider="data" finished-at="2022-06-28T17:45:37 CEST" duration-ms="693" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{email=krowa88@wp.pl, name=Marek Krowa}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchCustomersWithValidQueryParameter -->
        <test-method signature="createCustomerWithInvalidPhoneNumber(java.util.Hashtable)[pri:6, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:37 CEST" name="createCustomerWithInvalidPhoneNumber" data-provider="data" finished-at="2022-06-28T17:45:37 CEST" duration-ms="672" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{phone=string, name=Marek Jaworski}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[This fail is caused by API defect! expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: This fail is caused by API defect! expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:1240)
at com.testcases.CustomerTests.createCustomerWithInvalidPhoneNumber(CustomerTests.java:77)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:808)
at org.testng.TestRunner.run(TestRunner.java:603)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
at org.testng.SuiteRunner.run(SuiteRunner.java:326)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
at org.testng.TestNG.runSuites(TestNG.java:1092)
at org.testng.TestNG.run(TestNG.java:1060)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerWithInvalidPhoneNumber -->
        <test-method signature="createCustomerWithInvalidEmail(java.util.Hashtable)[pri:7, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:37 CEST" name="createCustomerWithInvalidEmail" data-provider="data" finished-at="2022-06-28T17:45:38 CEST" duration-ms="581" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{email=marco88wp.pl, name=Marco Rubio}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[This fail is caused by API defect! expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: This fail is caused by API defect! expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:1240)
at com.testcases.CustomerTests.createCustomerWithInvalidEmail(CustomerTests.java:85)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:808)
at org.testng.TestRunner.run(TestRunner.java:603)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
at org.testng.SuiteRunner.run(SuiteRunner.java:326)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
at org.testng.TestNG.runSuites(TestNG.java:1092)
at org.testng.TestNG.run(TestNG.java:1060)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerWithInvalidEmail -->
        <test-method signature="getCustomersWithSpecifiedEmailAddress(java.util.Hashtable)[pri:8, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:38 CEST" name="getCustomersWithSpecifiedEmailAddress" data-provider="data" finished-at="2022-06-28T17:45:39 CEST" duration-ms="681" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{email=mariusz88@gmial.com, name=Mariusz Podgorski}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCustomersWithSpecifiedEmailAddress -->
        <test-method signature="searchWithoutQueryParameter(java.util.Hashtable)[pri:9, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:39 CEST" name="searchWithoutQueryParameter" data-provider="data" finished-at="2022-06-28T17:45:39 CEST" duration-ms="630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchWithoutQueryParameter -->
        <test-method signature="createCustomerWithInvalidBalance(java.util.Hashtable)[pri:10, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:39 CEST" name="createCustomerWithInvalidBalance" data-provider="data" finished-at="2022-06-28T17:45:40 CEST" duration-ms="630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=Marek Jaworski, balance=string}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerWithInvalidBalance -->
        <test-method signature="updateCustomer(java.util.Hashtable)[pri:11, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:40 CEST" name="updateCustomer" data-provider="data" finished-at="2022-06-28T17:45:42 CEST" duration-ms="1849" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{description=Updating customer Mariusz Pdgorski}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCustomer -->
        <test-method signature="deleteCustomer(java.util.Hashtable)[pri:12, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:42 CEST" name="deleteCustomer" data-provider="data" finished-at="2022-06-28T17:45:43 CEST" duration-ms="754" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteCustomer -->
        <test-method signature="RetrieveCustomer(java.util.Hashtable)[pri:13, instance:com.testcases.CustomerTests@3b582111]" started-at="2022-06-28T17:45:43 CEST" name="RetrieveCustomer" data-provider="data" finished-at="2022-06-28T17:45:43 CEST" duration-ms="658" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{deleted=true, name=Mariusz Podgorski}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveCustomer -->
      </class> <!-- com.testcases.CustomerTests -->
    </test> <!-- Create customer API test -->
    <test started-at="2022-06-28T17:45:44 CEST" name="Balance API test" finished-at="2022-06-28T17:45:46 CEST" duration-ms="2468">
      <class name="com.testcases.BalanceTests">
        <test-method signature="retrieveBalance(java.util.Hashtable)[pri:1, instance:com.testcases.BalanceTests@4e406694]" started-at="2022-06-28T17:45:44 CEST" name="retrieveBalance" data-provider="data" finished-at="2022-06-28T17:45:44 CEST" duration-ms="667" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{id=cus_LsK4ym1Nil7fiN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveBalance -->
        <test-method signature="retrieveBalanceTransactionWithInvalidId(java.util.Hashtable)[pri:2, instance:com.testcases.BalanceTests@4e406694]" started-at="2022-06-28T17:45:44 CEST" name="retrieveBalanceTransactionWithInvalidId" data-provider="data" finished-at="2022-06-28T17:45:45 CEST" duration-ms="621" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{id=cus_LsK4ym1Nil7fiN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveBalanceTransactionWithInvalidId -->
        <test-method signature="listAllBalanceTransactions(java.util.Hashtable)[pri:3, instance:com.testcases.BalanceTests@4e406694]" started-at="2022-06-28T17:45:46 CEST" name="listAllBalanceTransactions" data-provider="data" finished-at="2022-06-28T17:45:46 CEST" duration-ms="587" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{id=cus_LsK4ym1Nil7fiN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listAllBalanceTransactions -->
      </class> <!-- com.testcases.BalanceTests -->
    </test> <!-- Balance API test -->
    <test started-at="2022-06-28T17:45:46 CEST" name="Product API test" finished-at="2022-06-28T17:45:57 CEST" duration-ms="11193">
      <class name="com.testcases.ProductTests">
        <test-method signature="createProduct(java.util.Hashtable)[pri:1, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:46 CEST" name="createProduct" data-provider="data" finished-at="2022-06-28T17:45:47 CEST" duration-ms="732" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=pln, name=Skis, price=50, description=Blue sport design skis, active=true}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createProduct -->
        <test-method signature="createProduct(java.util.Hashtable)[pri:1, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:47 CEST" name="createProduct" data-provider="data" finished-at="2022-06-28T17:45:48 CEST" duration-ms="690" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=pln, name=Balloons, price=700, description=Very durable and colorful, active=false}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createProduct -->
        <test-method signature="createProductWithoutValidName(java.util.Hashtable)[pri:2, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:48 CEST" name="createProductWithoutValidName" data-provider="data" finished-at="2022-06-28T17:45:51 CEST" duration-ms="3173" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createProductWithoutValidName -->
        <test-method signature="retrieveProduct(java.util.Hashtable)[pri:3, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:51 CEST" name="retrieveProduct" data-provider="data" finished-at="2022-06-28T17:45:54 CEST" duration-ms="2835" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveProduct -->
        <test-method signature="updateProduct(java.util.Hashtable)[pri:4, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:54 CEST" name="updateProduct" data-provider="data" finished-at="2022-06-28T17:45:54 CEST" duration-ms="752" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=usd, name=rubber duck, price=199, description=Very durable and yellow, active=true}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateProduct -->
        <test-method signature="listAllActiveProducts(java.util.Hashtable)[pri:5, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:54 CEST" name="listAllActiveProducts" data-provider="data" finished-at="2022-06-28T17:45:55 CEST" duration-ms="674" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{active=true}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listAllActiveProducts -->
        <test-method signature="deleteProduct(java.util.Hashtable)[pri:7, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:55 CEST" name="deleteProduct" data-provider="data" finished-at="2022-06-28T17:45:56 CEST" duration-ms="677" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{productIdIndex=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteProduct -->
        <test-method signature="deleteProduct(java.util.Hashtable)[pri:7, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:56 CEST" name="deleteProduct" data-provider="data" finished-at="2022-06-28T17:45:57 CEST" duration-ms="766" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{productIdIndex=1}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteProduct -->
        <test-method signature="searchDeletedProduct(java.util.Hashtable)[pri:8, instance:com.testcases.ProductTests@18ca3c62]" started-at="2022-06-28T17:45:57 CEST" name="searchDeletedProduct" data-provider="data" finished-at="2022-06-28T17:45:57 CEST" duration-ms="662" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{productIdIndex=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchDeletedProduct -->
      </class> <!-- com.testcases.ProductTests -->
    </test> <!-- Product API test -->
    <test started-at="2022-06-28T17:45:57 CEST" name="Paymentintents API test" finished-at="2022-06-28T17:46:05 CEST" duration-ms="7410">
      <class name="com.testcases.PaymentintentsTests">
        <test-method signature="createValidPaymentintent(java.util.Hashtable)[pri:1, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:45:57 CEST" name="createValidPaymentintent" data-provider="data" finished-at="2022-06-28T17:45:58 CEST" duration-ms="745" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=pln, amount=299}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createValidPaymentintent -->
        <test-method signature="createValidPaymentintent(java.util.Hashtable)[pri:1, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:45:58 CEST" name="createValidPaymentintent" data-provider="data" finished-at="2022-06-28T17:45:59 CEST" duration-ms="1040" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=usd, amount=5000}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createValidPaymentintent -->
        <test-method signature="createPaymentintentWithoutValidAmount(java.util.Hashtable)[pri:2, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:45:59 CEST" name="createPaymentintentWithoutValidAmount" data-provider="data" finished-at="2022-06-28T17:46:00 CEST" duration-ms="776" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{amount=2000}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createPaymentintentWithoutValidAmount -->
        <test-method signature="createPaymentintentWithoutValidCurrency(java.util.Hashtable)[pri:3, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:46:00 CEST" name="createPaymentintentWithoutValidCurrency" data-provider="data" finished-at="2022-06-28T17:46:01 CEST" duration-ms="672" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=pln}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[This fail is caused by API defect! expected [Missing required param: currency.] but found [Missing required param: amount.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: This fail is caused by API defect! expected [Missing required param: currency.] but found [Missing required param: amount.]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:655)
at com.testcases.PaymentintentsTests.createPaymentintentWithoutValidCurrency(PaymentintentsTests.java:45)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:808)
at org.testng.TestRunner.run(TestRunner.java:603)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
at org.testng.SuiteRunner.run(SuiteRunner.java:326)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
at org.testng.TestNG.runSuites(TestNG.java:1092)
at org.testng.TestNG.run(TestNG.java:1060)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createPaymentintentWithoutValidCurrency -->
        <test-method signature="retrievePaymentintent(java.util.Hashtable)[pri:4, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:46:01 CEST" name="retrievePaymentintent" data-provider="data" finished-at="2022-06-28T17:46:01 CEST" duration-ms="680" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrievePaymentintent -->
        <test-method signature="updatePaymentintent(java.util.Hashtable)[pri:5, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:46:01 CEST" name="updatePaymentintent" data-provider="data" finished-at="2022-06-28T17:46:02 CEST" duration-ms="770" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=usd, amount=500}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePaymentintent -->
        <test-method signature="confirmPaymentintentWithoutPaymentMethod(java.util.Hashtable)[pri:6, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:46:02 CEST" name="confirmPaymentintentWithoutPaymentMethod" data-provider="data" finished-at="2022-06-28T17:46:03 CEST" duration-ms="839" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- confirmPaymentintentWithoutPaymentMethod -->
        <test-method signature="cancelPaymentintent(java.util.Hashtable)[pri:8, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:46:03 CEST" name="cancelPaymentintent" data-provider="data" finished-at="2022-06-28T17:46:04 CEST" duration-ms="803" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cancelPaymentintent -->
        <test-method signature="listTwoPaymentintents(java.util.Hashtable)[pri:9, instance:com.testcases.PaymentintentsTests@7a9c84a5]" started-at="2022-06-28T17:46:04 CEST" name="listTwoPaymentintents" data-provider="data" finished-at="2022-06-28T17:46:05 CEST" duration-ms="832" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{limit=20}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listTwoPaymentintents -->
      </class> <!-- com.testcases.PaymentintentsTests -->
    </test> <!-- Paymentintents API test -->
    <test started-at="2022-06-28T17:46:05 CEST" name="Invoice API test" finished-at="2022-06-28T17:46:19 CEST" duration-ms="14483">
      <class name="com.testcases.InvoiceTests">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:45:28 CEST" name="setUp" finished-at="2022-06-28T17:45:29 CEST" duration-ms="441" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="createInvoiceItem(java.util.Hashtable)[pri:1, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:05 CEST" name="createInvoiceItem" data-provider="data" finished-at="2022-06-28T17:46:06 CEST" duration-ms="722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=pln, amount=200, description=New test item to invoice, customerId=cus_LsK4ym1Nil7fiN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createInvoiceItem -->
        <test-method signature="createInvoice(java.util.Hashtable)[pri:2, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:06 CEST" name="createInvoice" data-provider="data" finished-at="2022-06-28T17:46:07 CEST" duration-ms="1029" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{description=New invoice, customerId=cus_LsK4ym1Nil7fiN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createInvoice -->
        <test-method signature="createInvoiceWithoutValidCustomerId(java.util.Hashtable)[pri:3, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:07 CEST" name="createInvoiceWithoutValidCustomerId" data-provider="data" finished-at="2022-06-28T17:46:07 CEST" duration-ms="335" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createInvoiceWithoutValidCustomerId -->
        <test-method signature="updateInvoice(java.util.Hashtable)[pri:4, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:07 CEST" name="updateInvoice" data-provider="data" finished-at="2022-06-28T17:46:08 CEST" duration-ms="752" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{description=Updated invoice}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateInvoice -->
        <test-method signature="retrieveInvoice(java.util.Hashtable)[pri:5, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:08 CEST" name="retrieveInvoice" data-provider="data" finished-at="2022-06-28T17:46:09 CEST" duration-ms="1071" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveInvoice -->
        <test-method signature="finalizeInvoice(java.util.Hashtable)[pri:6, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:09 CEST" name="finalizeInvoice" data-provider="data" finished-at="2022-06-28T17:46:10 CEST" duration-ms="1143" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- finalizeInvoice -->
        <test-method signature="payInvoice(java.util.Hashtable)[pri:8, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:10 CEST" name="payInvoice" data-provider="data" finished-at="2022-06-28T17:46:14 CEST" duration-ms="3314" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=pln, amount=200, description=Invoice to be paid, customerId=cus_LsK4ym1Nil7fiN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- payInvoice -->
        <test-method signature="voidInvoiceThatWasPaid(java.util.Hashtable)[pri:9, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:14 CEST" name="voidInvoiceThatWasPaid" data-provider="data" finished-at="2022-06-28T17:46:14 CEST" duration-ms="648" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- voidInvoiceThatWasPaid -->
        <test-method signature="markInvoiceAsUncollectible(java.util.Hashtable)[pri:10, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:14 CEST" name="markInvoiceAsUncollectible" data-provider="data" finished-at="2022-06-28T17:46:15 CEST" duration-ms="733" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- markInvoiceAsUncollectible -->
        <test-method signature="listTwoLastInvoices(java.util.Hashtable)[pri:11, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:15 CEST" name="listTwoLastInvoices" data-provider="data" finished-at="2022-06-28T17:46:16 CEST" duration-ms="781" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listTwoLastInvoices -->
        <test-method signature="searchInvoices(java.util.Hashtable)[pri:12, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:16 CEST" name="searchInvoices" data-provider="data" finished-at="2022-06-28T17:46:17 CEST" duration-ms="827" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{invoiceNumber=016A5304-0001}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchInvoices -->
        <test-method signature="deleteDraftInvoice(java.util.Hashtable)[pri:13, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:17 CEST" name="deleteDraftInvoice" data-provider="data" finished-at="2022-06-28T17:46:19 CEST" duration-ms="2243" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{currency=pln, amount=300, description=Invoice to deleted, customerId=cus_LsK4ym1Nil7fiN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteDraftInvoice -->
        <test-method signature="deletePaidInvoice(java.util.Hashtable)[pri:13, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:19 CEST" name="deletePaidInvoice" data-provider="data" finished-at="2022-06-28T17:46:19 CEST" duration-ms="612" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{testData=N/A}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deletePaidInvoice -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.testcases.InvoiceTests@56bc3fac]" started-at="2022-06-28T17:46:19 CEST" name="tearDown" finished-at="2022-06-28T17:46:19 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.testcases.InvoiceTests -->
    </test> <!-- Invoice API test -->
  </suite> <!-- Suite -->
</testng-results>
